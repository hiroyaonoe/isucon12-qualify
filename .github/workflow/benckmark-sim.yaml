name: Run benchmark in a simulation environment

on:
  issue_comment:
    types:
      - created

env:
  server_instance_type: c5.large
  bechmark_instance_type: c4.xlarge
  repository_path: ./webapp
  service_name: isucondition

jobs:
  benchmark:
    if: (github.event.issue.pull_request != null) && (contains(github.event.comment.body, '/benchmark'))
    runs-on: ubuntu-latest

    outputs:
      benchmark-result: ${{ steps.benchmark.outputs.result }}
      server1-result: ${{ steps.server1.outputs.result }}
      server2-result: ${{ steps.server2.outputs.result }}
      server3-result: ${{ steps.server3.outputs.result }}
      target-head-hash: ${{ steps.get-target-head.outputs.hash }}

    steps:
      - name: Get the head of PR
        uses: actions/github-script@v6
        id: get-target-head
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const pull_request = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            })
            return pull_request.data.head.ref

      - name: Checkout
        uses: actions/checkout@v6
        with:
          ref: ${{ steps.get-target-head.outputs.result }}
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      
      - name: Add ssh key
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 700 ~/.ssh/id_rsa
      
      # https://github.com/hiroyaonoe/isucon11-qualify/issues/104
      # Ansibleのバージョンを下げるためにインストールし直す
      - name: Setup Ansible
        run: |
          # 先にansibleを実行してしまうとこのPATHがこれからも使用されてしまう
          # ansible --version
          pip install ansible==2.9.27
          ansible --version

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.5

      # TODO: server/benchmark_instance_type in tfvars
      - name: Apply terraform
        working-directory: ./terraform
        run: |
          echo 'allow_ssh_cidr = "0.0.0.0/0"' >> terraform.tfvars
          echo 'server_instance_type = "${{ env.server_instance_type }}"' >> terraform.tfvars
          echo 'benchmark_instance_type = "${{ env.benchmark_instance_type }}"' >> terraform.tfvars
          echo 'project_name = "${{ github.repository }}"' >> terraform.tfvars
          terraform init
          terraform validate
          terraform apply -auto-approve --parallelism=20

      - name: Get IP addresses
        id: get-ip-addr
        working-directory: ./terraform
        run: |
          benchmark_ip=$(cat terraform.tfstate | jq .outputs.benchmark_public_ip.value | tr -d '"')
          server1_ip=$(cat terraform.tfstate | jq .outputs.server1_public_ip.value | tr -d '"')
          server2_ip=$(cat terraform.tfstate | jq .outputs.server2_public_ip.value | tr -d '"')
          server3_ip=$(cat terraform.tfstate | jq .outputs.server3_public_ip.value | tr -d '"')
          echo "::add-mask::$benchmark_ip"
          echo "::add-mask::$server1_ip"
          echo "::add-mask::$server2_ip"
          echo "::add-mask::$server3_ip"
          echo "benchmark_ip=$benchmark_ip" >> "$GITHUB_OUTPUT"
          echo "server1_ip=$server1_ip" >> "$GITHUB_OUTPUT"
          echo "server2_ip=$server2_ip" >> "$GITHUB_OUTPUT"
          echo "server3_ip=$server3_ip" >> "$GITHUB_OUTPUT"

      # instanceを立てた直後はuser_dataのスクリプト実行が完了していない可能性があるのでsshの疎通確認をする
      - name: Check ssh
        run: |
          benchmark_ip=${{ steps.get-ip-addr.outputs.benchmark_ip }}
          server1_ip=${{ steps.get-ip-addr.outputs.server1_ip }}
          server2_ip=${{ steps.get-ip-addr.outputs.server2_ip }}
          server3_ip=${{ steps.get-ip-addr.outputs.server3_ip }}
          for ip in $benchmark_ip $server1_ip $server2_ip $server3_ip; do
            for i in `seq 10`; do
              echo $i
              result=0
              ssh isucon@$ip -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -- : || result=$?
              echo $result
              if [ $result = 0 ]; then
                echo "ok"
                break
              fi
              sleep 1
            done
          done

      - name: Run ansible-playbook
        working-directory: ./ansible
        run: |
          echo 'git_branch_name: ${{ steps.get-target-head.outputs.result }}' > group_vars/all/git_branch_name.yaml
          ansible-playbook site.yaml -vv

      - name: Run benchmark
        id: benchmark
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.benchmark_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.repository_path }}/script/benchmark.sh > benchmark_result.txt
          result=$(cat benchmark_result.txt)
          result=${result//$'\n'/\\n}
          echo "result=$result" >> "$GITHUB_OUTPUT"

      - name: Get metrics of server1
        id: server1
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server1_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.repository_path }}/script/analyze.sh > server1_result.txt
          result=$(cat server1_result.txt)
          result=${result//$'\n'/\\n}
          echo "result=$result" >> "$GITHUB_OUTPUT"

      - name: Get metrics of server2
        id: server2
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server2_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.repository_path }}/script/analyze.sh > server2_result.txt
          result=$(cat server2_result.txt)
          result=${result//$'\n'/\\n}
          echo "result=$result" >> "$GITHUB_OUTPUT"

      - name: Get metrics of server3
        id: server3
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server3_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.repository_path }}/script/analyze.sh > server3_result.txt
          result=$(cat server3_result.txt)
          result=${result//$'\n'/\\n}
          echo "result=$result" >> "$GITHUB_OUTPUT"

      - name: Get other metrics of server1 for debug
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server1_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no <<- EOF
          echo 'NEXT-SERVER1--------------------------------------------------------'
          sudo journalctl -u ${{ env.service_name }}.go.service || echo 'FAILED 1'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u nginx.service || echo 'FAILED 2'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/nginx/error.log || echo 'FAILED 3'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u mysql.service || echo 'FAILED 4'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/mysql/error.log || echo 'FAILED 5'
          EOF

      - name: Get other metrics of server2 for debug
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server2_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no <<- EOF
          echo 'NEXT-SERVER2--------------------------------------------------------'
          sudo journalctl -u ${{ env.service_name }}.go.service || echo 'FAILED 1'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u nginx.service || echo 'FAILED 2'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/nginx/error.log || echo 'FAILED 3'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u mysql.service || echo 'FAILED 4'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/mysql/error.log || echo 'FAILED 5'
          EOF

      - name: Get other metrics of server3 for debug
        run: |
          ssh isucon@${{ steps.get-ip-addr.outputs.server3_ip }} -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no <<- EOF
          echo 'NEXT-SERVER3--------------------------------------------------------'
          sudo journalctl -u ${{ env.service_name }}.go.service || echo 'FAILED 1'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u nginx.service || echo 'FAILED 2'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/nginx/error.log || echo 'FAILED 3'
          echo 'NEXT----------------------------------------------------------------'
          sudo journalctl -u mysql.service || echo 'FAILED 4'
          echo 'NEXT----------------------------------------------------------------'
          sudo cat /var/log/mysql/error.log || echo 'FAILED 5'
          EOF

      - name: Destroy terraform
        if: always()
        working-directory: ./terraform
        run: |
          terraform destroy -auto-approve

  comment:
    runs-on: ubuntu-latest
    needs: benchmark
    steps:
      - name: Build result comment
        id: comment
        run: |
          comment=$(cat << EOF
          # Benchmark Result
          ## Target Commit
          https://github.com/${{ github.repository }}/commit/${{ needs.benchmark.outputs.target-head-hash }}
          ## Result
          ### Benchmark
          <details>

          \`\`\`
          ${{ needs.benchmark.outputs.benchmark-result }}
          \`\`\`

          </details>

          ### Server1
          <details>

          \`\`\`
          ${{ needs.benchmark.outputs.server1-result }}
          \`\`\`

          </details>

          ### Server2
          <details>

          \`\`\`
          ${{ needs.benchmark.outputs.server2-result }}
          \`\`\`

          </details>

           ### Server3
          <details>

          \`\`\`
          ${{ needs.benchmark.outputs.server3-result }}
          \`\`\`

          </details>

          EOF
          )
          
          comment=${comment//$'\n'/\\n}
          comment=${comment//$'`'/'\`'}
          echo "comment=$comment" >> "$GITHUB_OUTPUT"

      - name: Comment
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{ steps.comment.outputs.comment }}`
            })
