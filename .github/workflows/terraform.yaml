name: Terraform

on:
  push:
    branches:
      - main
    # paths:
    #   - 'terraform/**'

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.5

      # TODO: server/benchmark_instance_type in tfvars
      - name: Apply terraform
        working-directory: ./terraform
        run: |
          echo 'allow_ssh_cidr = "${{ secrets.MY_IP }}/32"' >> terraform.tfvars
          terraform init
          terraform validate
          terraform apply -auto-approve --parallelism=20

      - name: Get ip addresses
        id: get-ip-addr
        working-directory: ./terraform
        run: |
          terraform output -json
          enable=$(terraform output -json | jq .enable.value | tr -d '"')
          echo $enable
          echo "enable=$enable" >> "$GITHUB_OUTPUT"
          if [ "$enable" = "true" ]; then
            benchmark_ip=$(terraform output -json | jq .benchmark_public_ip.value | tr -d '"')
            server1_ip=$(terraform output -json | jq .server1_public_ip.value | tr -d '"')
            server2_ip=$(terraform output -json | jq .server2_public_ip.value | tr -d '"')
            server3_ip=$(terraform output -json | jq .server3_public_ip.value | tr -d '"')
            echo "::add-mask::$benchmark_ip"
            echo "::add-mask::$server1_ip"
            echo "::add-mask::$server2_ip"
            echo "::add-mask::$server3_ip"
            echo "benchmark_ip=$benchmark_ip" >> "$GITHUB_OUTPUT"
            echo "server1_ip=$server1_ip" >> "$GITHUB_OUTPUT"
            echo "server2_ip=$server2_ip" >> "$GITHUB_OUTPUT"
            echo "server3_ip=$server3_ip" >> "$GITHUB_OUTPUT"
          fi

      - name: Send ssh config to Slack
        uses: slackapi/slack-github-action@v1.24.0
        if: ${{ steps.get-ip-addr.outputs.enable == 'true' }}
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Created"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "```Host isucon-benchmark\n  Hostname ${{ steps.get-ip-addr.outputs.benchmark_ip }}\nHost isucon-server1\n  Hostname ${{ steps.get-ip-addr.outputs.server1_ip }}\nHost isucon-server2\n  Hostname ${{ steps.get-ip-addr.outputs.server2_ip }}\nHost isucon-server3\n  Hostname ${{ steps.get-ip-addr.outputs.server3_ip }}\nHost isucon-*\n  User isucon```"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
